const n=JSON.parse('{"key":"v-4857582b","path":"/ko/posts/nodejs/language.html","title":"i18n으로 다국어 처리하기","lang":"ko-KR","frontmatter":{"description":"i18n으로 다국어 처리하기 미들웨어로서 다국어를 처리하는 법입니다. 클라이언트에게 사용 언어를 받아와 처리할 수도 있고, 유저에게 언어값을 저장하여 처리할 수도 있습니다. 클라이언트에서 헤더에 Language 라는 키로 언어를 넘기면 됩니다. // src/middleware/language import { Request, Response, NextFunction } from \\"express\\"; import i18n from \\"i18n\\"; i18n.configure({ locales: [\\"en\\", \\"ko\\"], defaultLocale: \\"ko\\", directory: \\"src/i18n\\", // extension: \\".ts\\", objectNotation: true, }); export const language = () =&gt; { return (req: Request, res: Response, next: NextFunction) =&gt; { const language = (req.headers.language as string) || \\"ko\\"; req.headers.language = language; i18n.setLocale(language); i18n.init(req, res); next(); }; };","head":[["meta",{"property":"og:url","content":"https://o-h-y-o.github.io/ko/posts/nodejs/language.html"}],["meta",{"property":"og:site_name","content":"Delicious Jelly"}],["meta",{"property":"og:title","content":"i18n으로 다국어 처리하기"}],["meta",{"property":"og:description","content":"i18n으로 다국어 처리하기 미들웨어로서 다국어를 처리하는 법입니다. 클라이언트에게 사용 언어를 받아와 처리할 수도 있고, 유저에게 언어값을 저장하여 처리할 수도 있습니다. 클라이언트에서 헤더에 Language 라는 키로 언어를 넘기면 됩니다. // src/middleware/language import { Request, Response, NextFunction } from \\"express\\"; import i18n from \\"i18n\\"; i18n.configure({ locales: [\\"en\\", \\"ko\\"], defaultLocale: \\"ko\\", directory: \\"src/i18n\\", // extension: \\".ts\\", objectNotation: true, }); export const language = () =&gt; { return (req: Request, res: Response, next: NextFunction) =&gt; { const language = (req.headers.language as string) || \\"ko\\"; req.headers.language = language; i18n.setLocale(language); i18n.init(req, res); next(); }; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2023-09-01T19:59:18.000Z"}],["meta",{"property":"article:author","content":"O-h-y-o"}],["meta",{"property":"article:modified_time","content":"2023-09-01T19:59:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"i18n으로 다국어 처리하기\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-01T19:59:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"O-h-y-o\\",\\"url\\":\\"https://github.com/O-h-y-o\\"}]}"]]},"headers":[],"git":{"createdTime":1693598358000,"updatedTime":1693598358000,"contributors":[{"name":"ohyo","email":"khr157929@gmail.com","commits":1}]},"readingTime":{"minutes":0.38,"words":115},"filePathRelative":"ko/posts/nodejs/language.md","localizedDate":"2023년 9월 1일","excerpt":"<h1> i18n으로 다국어 처리하기</h1>\\n<p>미들웨어로서 다국어를 처리하는 법입니다.</p>\\n<p>클라이언트에게 사용 언어를 받아와 처리할 수도 있고, 유저에게 언어값을 저장하여 처리할 수도 있습니다.</p>\\n<p>클라이언트에서 헤더에 Language 라는 키로 언어를 넘기면 됩니다.</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// src/middleware/language</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> Request<span class=\\"token punctuation\\">,</span> Response<span class=\\"token punctuation\\">,</span> NextFunction <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"express\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> i18n <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"i18n\\"</span><span class=\\"token punctuation\\">;</span>\\n\\ni18n<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">configure</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  locales<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"en\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"ko\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n  defaultLocale<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"ko\\"</span><span class=\\"token punctuation\\">,</span>\\n  directory<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"src/i18n\\"</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token comment\\">// extension: \\".ts\\",</span>\\n  objectNotation<span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">language</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>req<span class=\\"token operator\\">:</span> Request<span class=\\"token punctuation\\">,</span> res<span class=\\"token operator\\">:</span> Response<span class=\\"token punctuation\\">,</span> next<span class=\\"token operator\\">:</span> NextFunction<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> language <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>req<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>language <span class=\\"token keyword\\">as</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token string\\">\\"ko\\"</span><span class=\\"token punctuation\\">;</span>\\n    req<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">.</span>language <span class=\\"token operator\\">=</span> language<span class=\\"token punctuation\\">;</span>\\n    i18n<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setLocale</span><span class=\\"token punctuation\\">(</span>language<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    i18n<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span>req<span class=\\"token punctuation\\">,</span> res<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
