import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as u,c as r,e as t,w as e,a as n,b as s,f as d}from"./app-0c6458b7.js";const v={},m=n("h1",{id:"vuepress-theme-로-블로그-만들기",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vuepress-theme-로-블로그-만들기","aria-hidden":"true"},"#"),s(" Vuepress Theme 로 블로그 만들기")],-1),b=n("p",null,"Vuepress hope theme 로 개발 블로그를 만들어보자.",-1),h=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"pnpm"),s(" create vuepress-theme-hope "),n("span",{class:"token punctuation"},"["),s("dir"),n("span",{class:"token punctuation"},"]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"yarn"),s(" create vuepress-theme-hope "),n("span",{class:"token punctuation"},"["),s("dir"),n("span",{class:"token punctuation"},"]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),k=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"npm"),s(" init vuepress-theme-hope "),n("span",{class:"token punctuation"},"["),s("dir"),n("span",{class:"token punctuation"},"]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),_=d(`<ul><li>[dir] 에는 만들고자하는 실제 폴더 이름을 넣어주어야 합니다.</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>language
package manager
Project Name
Project version
Project description
license
multiple languages
github workflow
type of project
initialize repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>10가지 정도의 선택을 해야합니다.</li></ul><br><br><p>프로젝트가 만들어졌으면, 깃허브 홈페이지로 들어가서 <code>username.github.io</code> 라는 이름으로 github public repo 를 만들어줍니다. 아무것도 건들지 말고, repo 이름만 적고 만들어줍니다.</p><div class="hint-container info"><p class="hint-container-title">권한 수정하기</p><p>repo 를 만들고 Settings 탭 =&gt; Actions =&gt; General 로 들어가서 Workflow permissions의 옵션 중 Read and write permissions 로 바꿔주고 Save를 해줍니다.</p></div><br><div class="hint-container warning"><p class="hint-container-title">deploy-docs.yml</p><p>vuepress hope 에서는 기본적으로 github actions 템플릿을 제공해줍니다.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># deploy-docs.yml</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install pnpm
  <span class="token key atrule">uses</span><span class="token punctuation">:</span> pnpm/action<span class="token punctuation">-</span>setup@v2
  <span class="token key atrule">with</span><span class="token punctuation">:</span>
    <span class="token key atrule">run_install</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>중간쯤에 <code>Install pnpm</code> 이란것이 있는데 다음과 같이 version을 넣어주어야 합니다.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># deploy-docs.yml</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install pnpm
  <span class="token key atrule">uses</span><span class="token punctuation">:</span> pnpm/action<span class="token punctuation">-</span>setup@v2
  <span class="token key atrule">with</span><span class="token punctuation">:</span>
    <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">8</span>
    <span class="token key atrule">run_install</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p><br> <br></p>`,10),f={class:"hint-container note"},y=n("p",{class:"hint-container-title"},"깃에 소스를 올리기 전 빌드 테스트를 해보겠습니다.",-1),x=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"pnpm"),s(` run docs:build
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"yarn"),s(` docs:build
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"npm"),s(` run docs:build
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),$={class:"hint-container tip"},B=n("p",{class:"hint-container-title"},"'useXXX() is called without provider' 에러 발생시",-1),V=n("p",null,[s("vuepress와 호환되지 않는 버전의 라이브러리가 있을시 해당 에러가 발생합니다."),n("br"),s(" vp-update를 하면 자동으로 버전이 vuepress와 호환되는 버전으로 맞춰집니다.")],-1),I=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("$ "),n("span",{class:"token function"},"pnpm"),s(` dlx vp-update
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("$ "),n("span",{class:"token function"},"yarn"),s(` dlx vp-update
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,`$ npx vp-update
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),j=d(`<br><p>정상적으로 빌드가 되었다면 이제 깃 저장소에 소스를 올려보도록 하겠습니다.</p><br><p>vuepress로 만든 프로젝트에서 터미널을 열어주고 깃 저장소에 연결하여 소스를 올려주겠습니다.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> init
$ <span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token punctuation">[</span>url<span class="token punctuation">]</span>
$ <span class="token function">git</span> branch <span class="token parameter variable">-m</span> master main
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;message&quot;</span>
$ <span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><div class="hint-container tip"><p class="hint-container-title">브랜치 에러</p><p>git push에서 브랜치 에러가 난다면 다음 명령어를 입력해주세요.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> push --set-upstream origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><br><p>여기까지 모두 git repo에 올렸으면, 이제 빌드가 되면서 따로 .yml 파일을 수정하지 않았다면 gh-pages 라는 브랜치가 새로 생겼을겁니다.</p><p>이번에는 Settings tab =&gt; Pages 로 들어가 Build and deployment 에서 Branch를 gh-pages로 바꾸고 Save 해주겠습니다.</p>`,10),C={href:"http://username.github.io",target:"_blank",rel:"noopener noreferrer"};function P(T,E){const l=c("CodeTabs"),o=c("ExternalLinkIcon");return u(),r("div",null,[m,b,t(l,{id:"6",data:[{id:"pnpm"},{id:"yarn"},{id:"npm"}],active:0,"tab-id":"shell"},{title0:e(({value:a,isActive:i})=>[s("pnpm")]),title1:e(({value:a,isActive:i})=>[s("yarn")]),title2:e(({value:a,isActive:i})=>[s("npm")]),tab0:e(({value:a,isActive:i})=>[h]),tab1:e(({value:a,isActive:i})=>[g]),tab2:e(({value:a,isActive:i})=>[k]),_:1}),_,n("div",f,[y,t(l,{id:"56",data:[{id:"pnpm"},{id:"yarn"},{id:"npm"}],active:0,"tab-id":"shell"},{title0:e(({value:a,isActive:i})=>[s("pnpm")]),title1:e(({value:a,isActive:i})=>[s("yarn")]),title2:e(({value:a,isActive:i})=>[s("npm")]),tab0:e(({value:a,isActive:i})=>[x]),tab1:e(({value:a,isActive:i})=>[A]),tab2:e(({value:a,isActive:i})=>[w]),_:1})]),n("div",$,[B,V,t(l,{id:"72",data:[{id:"pnpm"},{id:"yarn"},{id:"npm"}],active:0,"tab-id":"shell"},{title0:e(({value:a,isActive:i})=>[s("pnpm")]),title1:e(({value:a,isActive:i})=>[s("yarn")]),title2:e(({value:a,isActive:i})=>[s("npm")]),tab0:e(({value:a,isActive:i})=>[I]),tab1:e(({value:a,isActive:i})=>[N]),tab2:e(({value:a,isActive:i})=>[S]),_:1})]),j,n("p",null,[s("잠시 기다린 뒤, "),n("a",C,[s("username.github.io"),t(o)]),s(" 로 들어가면 예쁜 홈페이지가 보일겁니다. 만약 홈페이지에 올라가지 않았다면 한번더 깃 저장소에 푸쉬를 해주세요.")])])}const L=p(v,[["render",P],["__file","start-blog.html.vue"]]);export{L as default};
