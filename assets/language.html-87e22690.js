import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-829d1310.js";const e={},p=t(`<h1 id="i18n으로-다국어-처리하기" tabindex="-1"><a class="header-anchor" href="#i18n으로-다국어-처리하기" aria-hidden="true">#</a> i18n으로 다국어 처리하기</h1><p>미들웨어로서 다국어를 처리하는 법입니다.</p><p>클라이언트에게 사용 언어를 받아와 처리할 수도 있고, 유저에게 언어값을 저장하여 처리할 수도 있습니다.</p><p>클라이언트에서 헤더에 Language 라는 키로 언어를 넘기면 됩니다.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/middleware/language</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Request<span class="token punctuation">,</span> Response<span class="token punctuation">,</span> NextFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> i18n <span class="token keyword">from</span> <span class="token string">&quot;i18n&quot;</span><span class="token punctuation">;</span>

i18n<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  locales<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;en&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ko&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  defaultLocale<span class="token operator">:</span> <span class="token string">&quot;ko&quot;</span><span class="token punctuation">,</span>
  directory<span class="token operator">:</span> <span class="token string">&quot;src/i18n&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// extension: &quot;.ts&quot;,</span>
  objectNotation<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">language</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> Request<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span> next<span class="token operator">:</span> NextFunction<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> language <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>language <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;ko&quot;</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>language <span class="token operator">=</span> language<span class="token punctuation">;</span>
    i18n<span class="token punctuation">.</span><span class="token function">setLocale</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i18n<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>json으로 언어 관리를 하시면 src/i18n 폴더에 locales에 적어둔 언어만큼 en.json, ko.json 이 있어야합니다. extension은 프로젝트에서 관리하는 언어파일 확장자입니다. ts파일로 관리한다면 ts로 적어주시면 됩니다. (잘 안될수도...)</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/routes</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> language <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;src/middleware/language&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router<span class="token operator">:</span> Router <span class="token operator">=</span> <span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">language</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 설정을 해주시면 매 통신시마다 클라이언트의 언어를 가져와 다국어 처리를 해줄 수 있습니다.</p><p>번역처리는 <code>req.__()</code>, <code>res.__()</code> 로 번역을 할 수 있습니다.</p><p>예로들어서,</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// ko.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;word.change&quot;</span><span class="token operator">:</span> <span class="token string">&quot;바꾸다&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// en.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;word.change&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Change&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>라고 되어있다고할때, 클라이언트가 &quot;en&quot; 을 보내면 en이 설정값이 되어 res.__(&quot;word.change&quot;) 는 Change 라는 값을 내어줍니다.</p><p>파라미터를 넣고싶으면 json에서는 이렇게 적어주세요</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// ko.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;word.change&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{{ word }} 바꾸다&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 하고 <code>res.__(&#39;word.change&#39;, { word: &#39;세상을&#39; })</code> 이라고 했을때 결과물은 <code>세상을 바꾸다</code> 가 됩니다. 이런식으로 파라미터 처리도 가능합니다.</p>`,15),o=[p];function c(i,u){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","language.html.vue"]]);export{d as default};
